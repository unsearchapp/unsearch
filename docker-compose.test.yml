version: "3.8"

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    ports:
      - "${PGPORT}:${PGPORT}"

  backend:
    image: backend-image:latest
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: development
    ports:
      - "1234:1234"
      - "5000:5000"
    volumes:
      - ./backend:/usr/src/app/backend
      - /usr/src/app/backend/node_modules
      - ./packages:/usr/src/app/packages
    environment:
      - PGUSER
      - PGHOST=postgres
      - PGDATABASE
      - PGPASSWORD
      - PGPORT
      - PG_SECRET_KEY
      - JWT_SECRET
      - LOG_LEVEL
      - WORD2VEC_URL
      - WEBAPP_URL
      - SELF_HOSTED=false
    depends_on:
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  frontend:
    image: frontend-image:latest
    build:
      context: .
      dockerfile: client/Dockerfile
      target: development
    environment:
      - APP_URL
      - VITE_SELF_HOSTED=${SELF_HOSTED}
    ports:
      - "3000:3000"
    volumes:
      - ./client:/usr/src/app/client
      - /usr/src/app/client/node_modules
      - /usr/src/app/packages/node_modules
      - ./packages:/usr/src/app/packages
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  migrate:
    image: node:20-slim
    working_dir: /usr/src/app/backend
    environment:
      - PGUSER
      - PGHOST
      - PGDATABASE
      - PGPASSWORD
      - PGPORT
      - PG_SECRET_KEY
    command: >
      sh -c "npm install -g pnpm && 
            pnpm install && 
            pnpm dlx knex migrate:latest"
    volumes:
      - ./backend:/usr/src/app/backend
    depends_on:
      - postgres


  playwright:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - PGUSER
      - PGHOST=postgres
      - PGDATABASE
      - PGPASSWORD
      - PGPORT
      - PG_SECRET_KEY
    volumes:
      - ./screenshots:/app/screenshots
    depends_on:
      frontend:
        condition: service_healthy
